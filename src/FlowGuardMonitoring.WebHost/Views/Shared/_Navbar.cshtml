@using FlowGuardMonitoring.DAL.Models
@using FlowGuardMonitoring.WebHost.Models.Settings
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@{
    var user = User.Identity is { IsAuthenticated: true } ? await UserManager.GetUserAsync(User) : null;
}
<nav class="navbar navbar-header navbar-header-transparent navbar-expand-lg border-bottom">
    <div class="container-fluid">
        <ul class="navbar-nav topbar-nav ms-md-auto align-items-center">
            <li class="nav-item topbar-icon dropdown hidden-caret">
                <a class="nav-link dropdown-toggle" href="#" id="notifDropdown" role="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fa fa-bell"></i>
                    <span class="notification" id="notifCount">4</span>
                </a>
                <ul class="dropdown-menu notif-box animated fadeIn" aria-labelledby="notifDropdown">
                    <li>
                        <div class="dropdown-title" id="notifTitle">
                            You have 0 new notification(s)
                        </div>
                    </li>
                    <li>
                        <div class="notif-scroll" style="max-height: 300px; overflow-y: auto;">
                            <div class="notif-center" id="notifList">
                                <!-- Notifications will be dynamically inserted here -->
                            </div>
                        </div>
                    </li>
                    <li>
                        <a class="see-all" href="@Url.Action("Index", "Notifications")">See all notifications<i class="fa fa-angle-right"></i></a>
                    </li>
                </ul>
            </li>
            <li class="nav-item topbar-user dropdown hidden-caret">
                <a class="profile-pic" href="@Url.Action("Account", "Settings")">
                    <div class="avatar-sm">
                        <img src="~/img/profile.jpg" alt="..." class="avatar-img rounded-circle" />
                    </div>
                    <span class="profile-username">
                        <span class="op-7">Hello, </span>
                        <span class="fw-bold">@(user?.FirstName ?? "User")</span>
                    </span>
                </a>
                <ul class="dropdown-menu dropdown-user animated fadeIn">
                    <div class="dropdown-user-scroll scrollbar-outer">
                        <li>
                            <a class="dropdown-item">Account Setting</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item">Logout</a>
                        </li>
                    </div>
                </ul>
            </li>
            <li class="nav-item topbar-icon dropdown hidden-caret">
                <a class="nav-link" id="logout">
                    <i class="fa fa-right-from-bracket"></i>
                </a>
            </li>
        </ul>
    </div>
</nav>

<script>
    // Function to fetch recent notifications
    async function fetchRecentNotifications() {
        try {
            const response = await fetch('/api/notifications/recent');
            const notifications = await response.json();

            const countResponse = await fetch('/api/notifications/count')
            var count = await countResponse.json();
            const notifCount = document.getElementById('notifCount');
            notifCount.textContent = count <= 9 ? count : '9+';

            const notifTitle = document.getElementById('notifTitle');
            notifTitle.textContent = `You have ${count} new notification${count !== 1 ? 's' : ''}`;

            const notifList = document.getElementById('notifList');
            notifList.innerHTML = '';

            notifications.forEach(notification => {
                const notifItem = document.createElement('a');
                notifItem.href = '#';
                notifItem.dataset.notificationId = notification.notificationId;

                let icon = '';
                let badge = '';
                switch (notification.type) {
                    case 'Warning':
                        icon = 'fa-triangle-exclamation';
                        badge = 'warning';
                        break;
                    case 'Critical':
                        icon = 'fa-radiation';
                        badge = 'danger';
                        break;
                    case 'Error':
                        icon = 'fa-xmark';
                        badge = 'danger';
                        break;
                    case 'Info':
                        icon = 'fa-info-circle';
                        badge = 'info';
                        break;
                }

                // Add notification content dynamically
                const notifContent = `
                    <div class="d-flex align-items-center">
                        <div class="badge-${badge} rounded-circle mx-3" style="width: 50px; height: 50px; overflow: hidden; text-align: center;">
                            <i class="fa ${icon} text-white fa-2x" style="line-height: 50px;"></i>
                        </div>
                        <div class="notif-content flex-grow-1" style="max-width: calc(100% - 50px);">
                            <span class="block ${!notification.isRead ? 'strong' : ''}">${notification.title} 
                            ${!notification.isRead ? '<i class="fa-circle fa fa-2xs text-danger new-notification-icon"></i>' : ''}
                            </span>
                            <span class="time">${dayjs(notification.date).fromNow()}</span>
                        </div>
                    </div>
                `;
                notifItem.innerHTML = notifContent;

                notifItem.addEventListener('click', async function(event) {
                    event.preventDefault();
                    event.stopPropagation();

                    const notificationId = this.dataset.notificationId;
                    if (notificationId) {
                        await markNotificationAsRead(notificationId);
                        let notifTextEl = this.querySelector('.notif-content span.block');
                        if (notifTextEl.classList.contains('strong')) {
                            notifTextEl.classList.remove('strong');
                            notifTextEl.textContent = notification.title;
                            notifTextEl.getElementsByClassName("new-notification-icon")[0].remove();
                            notifTitle.textContent = `You have ${--count} new notification${count !== 1 ? 's' : ''}`;
                            notifCount.textContent = count <= 9 ? count : '9+';
                        }
                    }
                });

                notifList.appendChild(notifItem);
            });
        } catch (error) {
            console.error('Error fetching notifications:', error);
        }
    }

    // Function to mark a notification as read
    async function markNotificationAsRead(notificationId) {
        try {
            const response = await fetch(`/api/notifications/mark-as-read?notificationId=${notificationId}`, {
                method: 'PUT'
            });

            if (response.ok) {
                console.log(`Notification ${notificationId} marked as read.`);
            } else {
                console.error('Failed to mark notification as read.');
            }
        } catch (error) {
            console.error('Error marking notification as read:', error);
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        fetchRecentNotifications();

        setInterval(fetchRecentNotifications, 30000);
    });
</script>
